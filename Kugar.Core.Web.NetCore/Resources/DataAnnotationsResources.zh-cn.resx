<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="The associated metadata type for type '{0}' contains the following unknown properties or fields: {1}. Please make sure that the names of these members match the names of the properties on the main type." xml:space="preserve">
    <value>类型'{0}'的关联元数据类型包含以下未知属性或字段:{1}。请确保这些成员的名称与主类型上的属性名称匹配。</value>
    <comment>AssociatedMetadataTypeTypeDescriptor_MetadataTypeContainsUnknownProperties</comment>
  </data>
  <data name="The type '{0}' must be public." xml:space="preserve">
    <value>类型“{0}必须是 public。</value>
    <comment>AttributeStore_Type_Must_Be_Public</comment>
  </data>
  <data name="The type '{0}' does not contain a public method named '{1}'." xml:space="preserve">
    <value>类型“{0}”不包含名为“{1}”的公共方法。</value>
    <comment>AttributeStore_Unknown_Method</comment>
  </data>
  <data name="The type '{0}' does not contain a public property named '{1}'." xml:space="preserve">
    <value>类型“{0}”不包含名为“{1}”的公共属性。</value>
    <comment>AttributeStore_Unknown_Property</comment>
  </data>
  <data name="The CustomValidationAttribute method '{0}' in type '{1}' must return System.ComponentModel.DataAnnotations.ValidationResult.  Use System.ComponentModel.DataAnnotations.ValidationResult.Success to represent success." xml:space="preserve">
    <value>The CustomValidationAttribute method '{0}' in type '{1}' must return System.ComponentModel.DataAnnotations.ValidationResult.  Use System.ComponentModel.DataAnnotations.ValidationResult.Success to represent success.</value>
    <comment>CustomValidationAttribute_Method_Must_Return_ValidationResult</comment>
  </data>
  <data name="The CustomValidationAttribute method '{0}' does not exist in type '{1}' or is not public and static." xml:space="preserve">
    <value>CustomValidationAttribute方法“{0}”不存在于类型“{1}”中，或者不是公共的和静态的。</value>
    <comment>CustomValidationAttribute_Method_Not_Found</comment>
  </data>
  <data name="The CustomValidationAttribute.Method was not specified." xml:space="preserve">
    <value>CustomValidationAttribute。方法未指定。</value>
    <comment>CustomValidationAttribute_Method_Required</comment>
  </data>
  <data name="The CustomValidationAttribute method '{0}' in type '{1}' must match the expected signature: public static ValidationResult {0}(object value, ValidationContext context).  The value can be strongly typed.  The ValidationContext parameter is optional." xml:space="preserve">
    <value>The CustomValidationAttribute method '{0}' in type '{1}' must match the expected signature: public static ValidationResult {0}(object value, ValidationContext context).  The value can be strongly typed.  The ValidationContext parameter is optional.</value>
    <comment>CustomValidationAttribute_Method_Signature</comment>
  </data>
  <data name="The custom validation type '{0}' must be public." xml:space="preserve">
    <value>自定义验证类型“{0}”必须是公共的。</value>
    <comment>CustomValidationAttribute_Type_Must_Be_Public</comment>
  </data>
  <data name="{0} is not valid." xml:space="preserve">
    <value>{0}无效。</value>
    <comment>CustomValidationAttribute_ValidationError</comment>
  </data>
  <data name="The CustomValidationAttribute.ValidatorType was not specified." xml:space="preserve">
    <value>CustomValidationAttribute。没有指定ValidatorType。</value>
    <comment>CustomValidationAttribute_ValidatorType_Required</comment>
  </data>
  <data name="The custom DataType string cannot be null or empty." xml:space="preserve">
    <value>自定义数据类型字符串不能为空或空。</value>
    <comment>DataTypeAttribute_EmptyDataTypeString</comment>
  </data>
  <data name="Cannot retrieve property '{0}' because localization failed.  Type '{1}' is not public or does not contain a public static string property with the name '{2}'." xml:space="preserve">
    <value>由于本地化失败，无法检索属性'{0}'。类型“{1}”不是公共的，或者不包含名为“{2}”的公共静态字符串属性。</value>
    <comment>LocalizableString_LocalizationFailed</comment>
  </data>
  <data name="The value for property '{0}' must be of type '{1}'." xml:space="preserve">
    <value>“{0}”的值必须为“{1}”类型。</value>
    <comment>Validator_Property_Value_Wrong_Type</comment>
  </data>
  <data name="The type {0} must implement {1}." xml:space="preserve">
    <value>类型 {0} 必须实现 {1} 。</value>
    <comment>RangeAttribute_ArbitraryTypeNotIComparable</comment>
  </data>
  <data name="The maximum value '{0}' must be greater than or equal to the minimum value '{1}'." xml:space="preserve">
    <value> '{0}' 必须大于或等于 '{1}'.</value>
    <comment>RangeAttribute_MinGreaterThanMax</comment>
  </data>
  <data name="The minimum and maximum values must be set." xml:space="preserve">
    <value>必须设置最小值和最大值。</value>
    <comment>RangeAttribute_Must_Set_Min_And_Max</comment>
  </data>
  <data name="The OperandType must be set when strings are used for minimum and maximum values." xml:space="preserve">
    <value>当字符串用于最小值和最大值时，必须设置操作数类型。</value>
    <comment>RangeAttribute_Must_Set_Operand_Type</comment>
  </data>
  <data name="The field {0} must be between {1} and {2}." xml:space="preserve">
    <value>{0} 必须在{1}和{2}之间。</value>
    <comment>RangeAttribute_ValidationError</comment>
  </data>
  <data name="The field {0} must match the regular expression '{1}'." xml:space="preserve">
    <value>{0} 必须匹配正则表达式'{1}'。</value>
    <comment>RegexAttribute_ValidationError</comment>
  </data>
  <data name="The pattern must be set to a valid regular expression." xml:space="preserve">
    <value>模式必须设置为有效的正则表达式。</value>
    <comment>RegularExpressionAttribute_Empty_Pattern</comment>
  </data>
  <data name="The {0} field is required." xml:space="preserve">
    <value>{0} 必填.</value>
    <comment>RequiredAttribute_ValidationError</comment>
  </data>
  <data name="The maximum length must be a nonnegative integer." xml:space="preserve">
    <value>最大长度必须是非负整数。</value>
    <comment>StringLengthAttribute_InvalidMaxLength</comment>
  </data>
  <data name="The field {0} must be a string with a maximum length of {1}." xml:space="preserve">
    <value>{0} 最大长度为{1} 个字符</value>
    <comment>StringLengthAttribute_ValidationError</comment>
  </data>
  <data name="The key parameter at position {0} with value '{1}' is not a string. Every key control parameter must be a string." xml:space="preserve">
    <value>位于位置{0}的值为“{1}”的关键参数不是字符串。每个键控制参数必须是一个字符串。</value>
    <comment>UIHintImplementation_ControlParameterKeyIsNotAString</comment>
  </data>
  <data name="The key parameter at position {0} is null. Every key control parameter must be a string." xml:space="preserve">
    <value>位置{0}的关键参数为null。每个键控制参数必须是一个字符串。</value>
    <comment>UIHintImplementation_ControlParameterKeyIsNull</comment>
  </data>
  <data name="The number of control parameters must be even." xml:space="preserve">
    <value>控制参数的数量必须是偶数。</value>
    <comment>UIHintImplementation_NeedEvenNumberOfControlParameters</comment>
  </data>
  <data name="The key parameter at position {0} with value '{1}' occurs more than once." xml:space="preserve">
    <value>位于位置{0}的值为“{1}”的关键参数出现不止一次。</value>
    <comment>UIHintImplementation_ControlParameterKeyOccursMoreThanOnce</comment>
  </data>
  <data name="Either ErrorMessageString or ErrorMessageResourceName must be set, but not both." xml:space="preserve">
    <value>必须设置ErrorMessageString或ErrorMessageResourceName，但不能同时设置二者。</value>
    <comment>ValidationAttribute_Cannot_Set_ErrorMessage_And_Resource</comment>
  </data>
  <data name="Both ErrorMessageResourceType and ErrorMessageResourceName need to be set on this attribute." xml:space="preserve">
    <value>ErrorMessageResourceType和ErrorMessageResourceName都需要在这个属性上设置。</value>
    <comment>ValidationAttribute_NeedBothResourceTypeAndResourceName</comment>
  </data>
  <data name="The property '{0}' on resource type '{1}' is not a string type." xml:space="preserve">
    <value>资源类型“{1}”上的属性“{0}”不是字符串类型。</value>
    <comment>ValidationAttribute_ResourcePropertyNotStringType</comment>
  </data>
  <data name="The resource type '{0}' does not have an accessible static property named '{1}'." xml:space="preserve">
    <value>资源类型“{0}”没有名为“{1}”的可访问静态属性。</value>
    <comment>ValidationAttribute_ResourceTypeDoesNotHaveProperty</comment>
  </data>
  <data name="The field {0} is invalid." xml:space="preserve">
    <value>{0}无效。</value>
    <comment>ValidationAttribute_ValidationError</comment>
  </data>
  <data name="The ValidationContext for the type '{0}', member name '{1}' must provide the MethodInfo." xml:space="preserve">
    <value>类型“{0}”、成员名称“{1}”的ValidationContext必须提供MethodInfo。</value>
    <comment>ValidationContext_Must_Be_Method</comment>
  </data>
  <data name="The type '{0}' needs to represent an enumeration type." xml:space="preserve">
    <value>类型“{0}”需要表示枚举类型。</value>
    <comment>EnumDataTypeAttribute_TypeNeedsToBeAnEnum</comment>
  </data>
  <data name="The type provided for EnumDataTypeAttribute cannot be null." xml:space="preserve">
    <value>为EnumDataTypeAttribute提供的类型不能为空。</value>
    <comment>EnumDataTypeAttribute_TypeCannotBeNull</comment>
  </data>
  <data name="MetadataClassType cannot be null." xml:space="preserve">
    <value>MetadataClassType 不能为空.</value>
    <comment>MetadataTypeAttribute_TypeCannotBeNull</comment>
  </data>
  <data name="The {0} property has not been set.  Use the {1} method to get the value." xml:space="preserve">
    <value>尚未设置{0}属性。请使用{1}方法获取值。</value>
    <comment>DisplayAttribute_PropertyNotSet</comment>
  </data>
  <data name="A service of type '{0}' already exists in the container." xml:space="preserve">
    <value>容器中已经存在一个类型为“{0}”的服务。</value>
    <comment>ValidationContextServiceContainer_ItemAlreadyExists</comment>
  </data>
  <data name="The instance provided must match the ObjectInstance on the ValidationContext supplied." xml:space="preserve">
    <value>所提供的实例必须与所提供的ValidationContext上的ObjectInstance匹配。</value>
    <comment>Validator_InstanceMustMatchValidationContextInstance</comment>
  </data>
  <data name="IsValid(object value) has not been implemented by this class.  The preferred entry point is GetValidationResult() and classes should override IsValid(object value, ValidationContext context)." xml:space="preserve">
    <value>IsValid(object value) has not been implemented by this class.  The preferred entry point is GetValidationResult() and classes should override IsValid(object value, ValidationContext context).</value>
    <comment>ValidationAttribute_IsValid_NotImplemented</comment>
  </data>
  <data name="Could not convert the value of type '{0}' to '{1}' as expected by method {2}.{3}." xml:space="preserve">
    <value>无法如方法{2}所期望的那样将类型'{0}'的值转换为'{1}'。</value>
    <comment>CustomValidationAttribute_Type_Conversion_Failed</comment>
  </data>
  <data name="The field {0} must be a string with a minimum length of {2} and a maximum length of {1}." xml:space="preserve">
    <value>{0} 必须是一个字符串，最小长度为{2}，最大长度为{1}。</value>
    <comment>StringLengthAttribute_ValidationErrorIncludingMinimum</comment>
  </data>
  <data name="The {0} field is not a valid credit card number." xml:space="preserve">
    <value>{0} 不是有效的信用卡号码。</value>
    <comment>CreditCardAttribute_Invalid</comment>
  </data>
  <data name="The {0} field is not a valid e-mail address." xml:space="preserve">
    <value> {0} 不符合EMail规则.</value>
    <comment>EmailAddressAttribute_Invalid</comment>
  </data>
  <data name="The {0} field only accepts files with the following extensions: {1}" xml:space="preserve">
    <value> {0} 只能接收扩展名 : {1}</value>
    <comment>FileExtensionsAttribute_Invalid</comment>
  </data>
  <data name="The {0} field is not a valid fully-qualified http, https, or ftp URL." xml:space="preserve">
    <value>{0}不是有效的完全限定http、https或ftp URL。</value>
    <comment>UrlAttribute_Invalid</comment>
  </data>
  <data name="'{0}' and '{1}' do not match." xml:space="preserve">
    <value>'{0}' 不等于 '{1}' .</value>
    <comment>CompareAttribute_MustMatch</comment>
  </data>
  <data name="Value cannot be null or empty." xml:space="preserve">
    <value>值不能为空.</value>
    <comment>Common_NullOrEmpty</comment>
  </data>
  <data name="Could not find a property named {0}." xml:space="preserve">
    <value>无法找到 {0} 属性.</value>
    <comment>CompareAttribute_UnknownProperty</comment>
  </data>
  <data name="The property {0}.{1} could not be found." xml:space="preserve">
    <value>{0}.{1} 不存在。</value>
    <comment>Common_PropertyNotFound</comment>
  </data>
  <data name="The {0} field is not a valid phone number." xml:space="preserve">
    <value>{0} 不是有效的电话号码。</value>
    <comment>PhoneAttribute_Invalid</comment>
  </data>
  <data name="MaxLengthAttribute must have a Length value that is greater than zero. Use MaxLength() without parameters to indicate that the string or array can have the maximum allowable length." xml:space="preserve">
    <value>MaxLengthAttribute 的Length属性必须大于0. 使用 MaxLength() 没有参数来指示字符串或数组可以具有允许的最大长度.</value>
    <comment>MaxLengthAttribute_InvalidMaxLength</comment>
  </data>
  <data name="The field {0} must be a string or array type with a maximum length of '{1}'." xml:space="preserve">
    <value> {0} 必须是字符串或数组类型，最大长度为 '{1}'。</value>
    <comment>MaxLengthAttribute_ValidationError</comment>
  </data>
  <data name="MinLengthAttribute must have a Length value that is zero or greater." xml:space="preserve">
    <value>MinLengthAttribute 必须有一个长度值为零或更大.</value>
    <comment>MinLengthAttribute_InvalidMinLength</comment>
  </data>
  <data name="The field {0} must be a string or array type with a minimum length of '{1}'." xml:space="preserve">
    <value>{0}必须是字符串或数组类型，最小长度为'{1}'。</value>
    <comment>MinLengthAttribute_ValidationError</comment>
  </data>
  <data name="The argument '{0}' cannot be null, empty or contain only white space." xml:space="preserve">
    <value>参数 '{0}' 不可为空或空格.</value>
    <comment>ArgumentIsNullOrWhitespace</comment>
  </data>
</root>